#!/bin/bash

journal_path=$HOME//projet/.synchro
conflict_path=$HOME//projet/.conflict
filesystem_A=$HOME/projet/systemA/
filesystem_B=$HOME/projet/systemB/

function meta_test {
  #Test the metadatas of the files
  meta_success=1 # 1 = success ; -1 = same md5 but different metdata ; 0 = difference btw two files
  if [[ ( `stat -c %a $1` -eq `stat -c %a $2` )  &&  #If files rights are the same
     ( `stat -c %s $1` -eq `stat -c %s $2` )  && # same weight
     ( `stat -c %Y $1` -eq `stat -c %Y $2` ) ]]; then # same date of last mod

    data="$1 $2 `stat -c %a $1` `stat -c %s $1` `stat -c %Y $1`"
    echo "Metatest succeeded for $1 and $2 !"
    if [[ `cat $journal_path | grep -c $1` -gt 0 ]] ; then
      sed -i 's|^"$1"$|"$data"|' "$journal_path"
    else
        echo $data >> $journal_path
    fi

  elif [[ `md5sum $1 | cut -f 1 -d' '` = `md5sum $2 | cut -f 1 -d' '` ]] ; then
    data="$1 $2 -1"
    echo "Conflit sur les metadonnées pour $1 et $2"
    echo $data >> $conflict_path
    meta_success=-1

  else
      echo "Metatest failed for $1 and $2 !"
      meta_success=0
  fi


}

function journal_verif {
  #local j_line=$(cat $journal_path | grep $1)
  local j_rights=$(cat $journal_path | grep $1 | cut -f 3 -d' ')
  local j_weight=$(cat $journal_path | grep $1 | cut -f 4 -d' ')
  local j_date=$(cat $journal_path | grep $1 |cut $j_line -f 5 -d' ')

  if [[ ( `stat -c %a $1` -eq $j_rights )  &&  #If files rights are the same
     ( `stat -c %s $1` -eq $j_weight )  && # same weight
     ( `stat -c %Y $1` -eq $j_date ) ]]; then

       echo "$1 is the TRUE heir to the throne !"
       cp $1 $2
       touch $1 $2

  elif [[ ( `stat -c %a $2` -eq $j_rights )  &&  #If files rights are the same
     ( `stat -c %s $2` -eq $j_weight )  && # same weight
     ( `stat -c %Y $2` -eq $j_date ) ]]; then

       echo "$2 is the TRUE heir to the throne"
       cp $2 $1
       touch $1 $2
  else
      data"$1 $2 0"
      echo $data >> $conflict_path
      echo "Conflit entre $1 et $2 !"
    fi


}

function conflict_solver {

  case $3 in
    1) if [[ ( -d $1 && -f $2 )]] ; then
    echo " $1 est un repertoire, $2 est un fichier ordinaire"
    echo " Souhaitez vous garder le premier fichier, le second, ou ne rien faire ?"
    # MAKE TEST

    else
      echo " $2 est un repertoire, $1 est un fichier ordinaire "
      echo " Souhaitez vous garder le premier fichier, le second, ou ne rien faire ?"
      # MAKE TEST
    fi
      ;;

    2) echo " $1 et $2 ne sont en conflit que sur les métadonnées"
      echo " Souhaitez vous conservez celles du premier fichier, du second ou ne rien faire ?"
      #MAKE TEST
      ;;

    3) echo " $1 et $2 diffèrent par leur contenu"
    echo " Souhaitez vous garder le premier fichier, le second, ou ne rien faire ?"
    #MAKE TEST
      ;;
    *) echo "Oups ! Unknown conflict !"
      ;;
  esac

}

function recursive_copy {
  for file in $(ls -a $1) ; do

    if [[ `ls -a $2 | grep -c $file` -eq 0 ]] ; then #Test si le fichier n'existe que dans $1
      if  [[ -d $1$file ]] ; then
      echo "Le repertoire $file sera copié dans $2"

        cp -r $1$file $2


      elif [[ -f $1$file ]] ; then
        echo "$file sera copié dans $2"
        cp $1$file $2
        touch $1$file $2$file
      fi


    elif [[ ( -d $1$file ) && ( `ls -a $2 | grep -c $file` -eq 1 ) ]] ; then # repertoire présent dans les deux fs
    echo "Recursive copy dans $1$file"
    recursive_copy $1$file/ $2$file/
    fi
  done
}

function recursive_synchro { #arg $1 filesystem_A $2 filesystem_B
  for fileA in $(ls -a $1) ; do

    if [ `ls -a $2 | grep -c $fileA` -eq 1 ] ; then #Test si le fichier existe dans B et est unique
      fileB=$(ls -a $2 | grep $fileA)

      local fileA=$1$fileA
      local fileB=$2$fileB
      local conflict=0  #0 = no conflict ; 1 = conflict of type ; 2  = meta conflict

      echo $fileA
      echo $fileB

      if [[ ( -d $fileA && -f $fileB ) || ( -f $fileA  && -d $fileB ) ]]  ; then #If files are not of teh same type
        echo "Conflit entre les $fileA et $fileB"

      elif [[ -d $fileA  &&  -d $fileB ]] ; then
  	    echo " Recursion dans $fileA et $fileB"
        #Descendre recursivement : rappel de fonction
        recursive_synchro $fileA/ $fileB/

      elif [[ -f $fileA  &&  -f $fileB ]] ; then
        echo "Metatest time"
        meta_test $fileA $fileB

        if [[ $meta_success -eq 0 ]] ; then
          echo "Battle for the throne !"
          journal_verif $fileA $fileB
        fi

      else
        echo "everything failed"
      fi
  fi
  done
}

#recursive_synchro $filesystem_A $filesystem_B
recursive_copy $filesystem_A $filesystem_B
recursive_copy $filesystem_B $filesystem_A
